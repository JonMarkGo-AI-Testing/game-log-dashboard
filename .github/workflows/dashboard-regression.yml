name: Dashboard Regression Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      # Only trigger on dashboard-related files
      - 'src/components/LogDashboard.tsx'
      - 'src/components/logs/**'
      - 'src/utils/logUtils.ts'
      - 'src/hooks/useGameLogs.ts'
      - 'tests/components/LogDashboard.test.tsx'
      - 'tests/logs/**'
      - 'tests/utils/logUtils.test.ts'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dashboard-regression:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR files and diff
        id: pr-files
        run: |
          # Get PR files
          FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '[.[].filename] | @json')

          if [ -z "$FILES" ]; then
            echo "Error: Failed to fetch or parse PR files."
            exit 1
          fi

          # Get PR details including latest commit
          PR_DETAILS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")
          
          HEAD_SHA=$(echo "$PR_DETAILS" | jq -r '.head.sha')
          BASE_SHA=$(echo "$PR_DETAILS" | jq -r '.base.sha')

          # Get the diff for each file
          DIFFS_ARRAY="[]"
          for file in $(echo "$FILES" | jq -r '.[]'); do
            DIFF=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
              jq -r ".[] | select(.filename == \"$file\") | {filename: .filename, patch: .patch, position: .position}")
            
            if [ ! -z "$DIFF" ]; then
              DIFFS_ARRAY=$(echo "$DIFFS_ARRAY" | jq ". + [$DIFF]")
            fi
          done

          # Store outputs
          echo "files=$FILES" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          echo "base_sha=$BASE_SHA" >> $GITHUB_OUTPUT
          echo "diffs=$(echo $DIFFS_ARRAY | jq -c .)" >> $GITHUB_OUTPUT

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run Dashboard Tests
        id: test-run
        run: |
          # Run dashboard-related tests with JSON reporter
          npm test -- --testPathPattern='(LogDashboard|LogEntry|ErrorDistribution|logUtils)' --json --outputFile=test-results.json || true
          
          # Save test results for Devin to analyze
          TEST_RESULTS=$(cat test-results.json | jq -c . | jq -R .)
          echo "results=$TEST_RESULTS" >> $GITHUB_OUTPUT

      - name: Create Devin Review Session
        id: devin-review
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_RESULTS: ${{ steps.test-run.outputs.results }}
          FILES_TO_REVIEW: ${{ steps.pr-files.outputs.files }}
          HEAD_SHA: ${{ steps.pr-files.outputs.head_sha }}
          BASE_SHA: ${{ steps.pr-files.outputs.base_sha }}
          DIFFS: ${{ steps.pr-files.outputs.diffs }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Read the prompt from file and replace environment variables
          PROMPT=$(cat .github/dashboard-review-prompt.md | envsubst)
          
          # Convert multiline string to JSON-safe format
          ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)

          # Make the API call to Devin
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\": $ESCAPED_PROMPT}" \
            "https://api.devin.ai/v1/sessions")

          # Debug: Print the raw response
          echo "Raw Devin Response:"
          echo "$RESPONSE"

          # Extract session details
          SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id // empty')
          if [ -z "$SESSION_ID" ] || [ "$SESSION_ID" = "null" ]; then
            echo "Error: Failed to get valid session ID from response"
            echo "Response was: $RESPONSE"
            exit 1
          fi

          echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT